[{"title":"安装Code-server使用并配置https","path":"/11235da5e10d/","content":"在自己的局域网服务器上安装了code-server，但是markdown预览无法正常显示。查了一下，需要在https加密模式下才能在浏览器中正常使用功能。 自己的服务器是用WireGuard在虚拟局域网内连接，没有公网ip和域名， 最后用的是本地签名证书。 I 安装&amp;启动GitHub地址： 安装命令 现在你有两种方式来启动 code-server： 先手动启动生成默认配置文件 手动启动：如果你不希望 code-server 作为后台服务运行，你可以手动启动它： 1code-server 作为系统服务启动：这将使 code-server 在后台运行，并在开机时自动启动。只需执行以下命令： 1sudo systemctl enable --now code-server@root 在这里，$USER 是环境变量，表示当前用户名。如果你想要以其他用户身份运行 code-server，你需要将 $USER 替换为相应的用户名。 一旦 code-server 启动，你就可以通过 http://localhost:8080 （默认端口是 8080）在你的浏览器中访问它了。如果你在远程服务器上安装了 code-server，你需要替换 localhost 为你服务器的公网 IP 地址或域名，并确保防火墙设置允许流量通过 8080 端口。 首次访问 code-server 时，你会被要求输入一个密码。这个密码是为了保护你的 code-server 实例不被未授权访问。你可以在启动 code-server 时通过 --auth 选项设置密码，或者在 ~/.config/code-server/config.yaml 文件中进行配置。 查看配置文件： 1cat ~/.config/code-server/config.yaml password 字段的密码是随机生成的，你可以自己修改 改动配置文件（vim）： 1vim ~/.config/code-server/config.yaml 修改 bind-addr 字段的IP为 本地局域网ip 重启Code-Server 服务 1sudo systemctl restart code-server@root 然后在同一局域网下访问host地址，输入密码即可。 此时是http，没有加载证书 II 配置本地https使用mkcert 生成相应网址的证书: 示例 本地地址为192.168.1.223 1234# $ mkcert [website addr] 192.168.1.223为服务器的内网网址# -cert-file [filename] 生成对应crt文件的名称# -cert-key [filename] 生成对应key文件的名称$ mkcert -cert-file phone-code-server.crt -key-file phone-code-server.key 192.168.1.223 127.0.0.1 在&#x2F;root&#x2F;.local&#x2F;share&#x2F;code-server&#x2F;下创建cert文件夹 1mkdir ~/.local/share/code-server/cert 复制刚刚生成的证书文件到~&#x2F;.local&#x2F;share&#x2F;code-server&#x2F;cert目录 12cp /root/phone-code-server.key ~/.local/share/code-server/cert/cp /root/phone-code-server.crt ~/.local/share/code-server/cert/ 再次改动配置文件（vim）： 1vim ~/.config/code-server/config.yaml 如下 修改证书位置，刚刚证书文件已经复制过去了 12345bind-addr: 192.168.1.223:8080auth: passwordpassword: df90f81c4355ffe98172dbe1cert: /root/.local/share/code-server/cert/phone-code-server.crtcert-key: /root/.local/share/code-server/cert/phone-code-server.key 重启Code-Server 服务 1sudo systemctl restart code-server@root 因为是本地证书，所以我们要把证书导出，再安装到访问客户端才可以 12345mkcert -installmkcert -CAROOTcd /home/cp /root/.local/share/mkcert/rootCA.pem /home/ #将证书复制到home目录 方便一会导出mv rootCA.pem rootCA.crt #重命名为crt，方便Windows导入 现在登陆 code-server web 选择资源管理器 选择”open folder” 切换到home目录 信任 选择刚刚重命名的证书文件 点击下载 Windows 安装，受信任的根证书 导入完成后，重新打开浏览器，打开code-server,可以看到已经生效了https 重新登陆后可以到拓展市场，安装简体中文包 选择菜单，终端，使用很方便！！！ 完成","tags":["linux","Code Server","https"]},{"title":"docker 一键安装命令","path":"/0ee259ad053c/","content":"docker的一键安装指令（脚本目前好像只能适用于Ubuntu和Debian，centos也可以） 1.官方给的命令（推荐） 1curl -sSL https://get.docker.com/ | sh 2.DaoCloud的（国内DaoCloud的快一些） 1curl -sSL https://get.daocloud.io/docker | sh","tags":["Linux","docker"]},{"title":"部署Docker管理工具 Portainer-CE 社区","path":"/3ab5f2264bd0/","content":"Portainer是一款开源的容器管理平台，它提供了一个直观易用的Web界面，帮助用户管理Docker容器集群、镜像、卷等资源。Portainer 支持多种 Docker 环境，包括本地Docker、Swarm 模式、Kubernetes 等，并支持多租户、RBAC权限管理等功能。 使用 Portainer，可以方便地创建、启动、停止、删除容器，管理容器的网络、卷、环境变量等设置，查看容器日志、统计信息等。此外，Portainer 还提供了一些实用的功能，如容器模板、自定义仪表盘、事件监控、Web 终端等。 GitHub地址： Docker Hub 地址：https://hub.docker.com/r/6053537/portainer-ce 一键安装代码 1docker run -d --restart=always --name=&quot;portainer&quot; -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock 6053537/portainer-ce 访问hub.docker.com网络慢,可以尝试下面的方式 12docker pull hub-mirror.c.163.com/6053537/portainer-cedocker run -d --restart=always --name=&quot;portainer&quot; -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data 6053537/portainer-ce 如果你要启用ssl访问，远程主机建议启用，端口443和证书路径&#x2F;certs请自行更改 123docker run -d -p 443:9000 --name portainer --restart always -v ~/local-certs:/certs -v portainer_data:/data 6053537/portainer-ce -v /var/run/docker.sock:/var/run/docker.sock --ssl --sslcert /certs/portainer.crt --sslkey /certs/portainer.key","tags":["docker","Portainer-CE"]},{"title":"修正ubuntu的时区和时间","path":"/fed1903aae45/","content":"查看当前系统时间 1date 这个命令会将系统时区设置为 Asia&#x2F;Shanghai，它对应于中国大陆的标准时间，即东八区 1sudo timedatectl set-timezone Asia/Shanghai 可以用以下命令确认时区设置是否成功： 1timedatectl 手动强制一次时间同步，可以使用 timedatectl 命令： 12sudo timedatectl set-ntp offsudo timedatectl set-ntp on","tags":["linux"]},{"title":"friends","path":"/friends/index.html","content":"某某某"},{"title":"wiki","path":"/wiki/index.html","content":"某某某https://"}]